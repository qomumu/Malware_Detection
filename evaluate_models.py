from classifier import *
from sklearn.metrics import roc_auc_score,roc_curve
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier as RF
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import BernoulliNB,GaussianNB ,MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn import tree
from sklearn import svm
import lightgbm as lgbm
import matplotlib.pyplot as plt

data_dir = r'./dateset'
x_train, y_train = read_vectorized_features(data_dir, "train")
x_test, y_test = read_vectorized_features(data_dir, "test")

print('DecisionTree训练测试子集--------')

DT = tree.DecisionTreeClassifier()
DT.fit(x_train, y_train)
y_predict = DT.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_predict, pos_label=1)
roc_auc_dt = roc_auc_score(y_test, y_predict)
accuracy_dt = accuracy_score(y_test, y_predict)
precision_dt = precision_score(y_test, y_predict, average='weighted')
recall_dt = recall_score(y_test, y_predict, average='weighted')
f1_dt = f1_score(y_test, y_predict, average='weighted')
print('roc_auc_score:' , roc_auc_dt)
print('accuracy:', accuracy_dt)
print('precision:', precision_dt)
print('recall:', recall_dt)
print('f1-score:', f1_dt)
plt.plot(fpr, tpr, color='purple', label='DT')

print('LinearSVC训练测试子集----------')

svm=svm.SVC()
svm.fit(x_train, y_train)
y_predict = svm.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_predict, pos_label=1)
roc_auc_svm = roc_auc_score(y_test, y_predict)
accuracy_svm = accuracy_score(y_test, y_predict)
precision_svm = precision_score(y_test, y_predict, average='weighted')
recall_svm = recall_score(y_test, y_predict, average='weighted')
f1_svm = f1_score(y_test, y_predict, average='weighted')
print('roc_auc_score:' , roc_auc_svm)
print('accuracy:', accuracy_svm)
print('precision:', precision_svm)
print('recall:', recall_svm)
print('f1-score:', f1_svm)
plt.plot(fpr, tpr, color='blue', label='SVM')

print('KNeighbors训练测试子集---------')

knn = KNeighborsClassifier()
knn.fit(x_train, y_train)
y_predict = knn.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_predict, pos_label=1)
roc_auc_knn = roc_auc_score(y_test, y_predict)
accuracy_knn = accuracy_score(y_test, y_predict)
precision_knn = precision_score(y_test, y_predict, average='weighted')
recall_knn = recall_score(y_test, y_predict, average='weighted')
f1_knn = f1_score(y_test, y_predict, average='weighted')
print('roc_auc_score:' , roc_auc_knn)
print('accuracy:', accuracy_knn)
print('precision:', precision_knn)
print('recall:', recall_knn)
print('f1-score:', f1_knn)
plt.plot(fpr, tpr, color='skyblue', label='KNN')

print('GaussianNB训练测试子集---------')

bayes = GaussianNB()
bayes.fit(x_train, y_train)
y_predict = bayes.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_predict, pos_label=1)
roc_auc_bayes = roc_auc_score(y_test, y_predict)
accuracy_bayes = accuracy_score(y_test, y_predict)
precision_bayes = precision_score(y_test, y_predict, average='weighted')
recall_bayes = recall_score(y_test, y_predict, average='weighted')
f1_bayes = f1_score(y_test, y_predict, average='weighted')
print('roc_auc_score:' , roc_auc_bayes)
print('accuracy:', accuracy_bayes)
print('precision:', precision_bayes)
print('recall:', recall_bayes)
print('f1-score:', f1_bayes)
plt.plot(fpr, tpr, color='green', label='GNB')

print('LRegression训练测试子集--------')

LR = LogisticRegression(max_iter=1000)
LR.fit(x_train, y_train)
y_predict = LR.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_predict, pos_label=1)
roc_auc_lr = roc_auc_score(y_test, y_predict)
accuracy_lr = accuracy_score(y_test, y_predict)
precision_lr = precision_score(y_test, y_predict, average='weighted')
recall_lr = recall_score(y_test, y_predict, average='weighted')
f1_lr = f1_score(y_test, y_predict, average='weighted')
print('roc_auc_score:' , roc_auc_lr)
print('accuracy:', accuracy_lr)
print('precision:', precision_lr)
print('recall:', recall_lr)
print('f1-score:', f1_lr)
plt.plot(fpr, tpr, color='orchid', label='LR')

print('RandomForest训练测试子集-------')

rf = RF(n_estimators=500)
rf.fit(x_train,y_train)
y_pred = rf.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_pred, pos_label=1)
roc_auc_rf = roc_auc_score(y_test, y_pred)
accuracy_rf = accuracy_score(y_test, y_pred.round())
precision_rf = precision_score(y_test, y_pred.round(), average='weighted')
recall_rf = recall_score(y_test, y_pred.round(), average='weighted')
f1_rf = f1_score(y_test, y_pred.round(), average='weighted')
print('roc_auc_score:' , roc_auc_rf)
print('accuracy:', accuracy_rf)
print('precision:', precision_rf)
print('recall:', recall_rf)
print('f1-score:', f1_rf)
plt.plot(fpr, tpr, color='orange', label='RF')

print('LightGBM训练测试子集-----------')

lgb = lgbm.LGBMClassifier()
lgb.fit(x_train,y_train)
y_pred = lgb.predict(x_test)

fpr, tpr, thresholds = roc_curve(y_test, y_pred, pos_label=1)
roc_auc_lgb = roc_auc_score(y_test, y_pred)
accuracy_lgb = accuracy_score(y_test, y_pred.round())
precision_lgb = precision_score(y_test, y_pred.round(), average='weighted')
recall_lgb = recall_score(y_test, y_pred.round(), average='weighted')
f1_lgb = f1_score(y_test, y_pred.round(), average='weighted')
print('roc_auc_score:' , roc_auc_lgb)
print('accuracy:', accuracy_lgb)
print('precision:', precision_lgb)
print('recall:', recall_lgb)
print('f1-score:', f1_lgb)
plt.plot(fpr, tpr, color='red', label='LGBM')


# data_dir = r'D:\TrainData\data'
# x_test, y_test = read_vectorized_features(data_dir, "test")
# test_rows = (y_test != -1)

# print('LightGBM识别模型v1-----------')

# lgbm_model = lgbm.Booster(model_file='model_init.txt')
# y_pred = lgbm_model.predict(x_test[test_rows],predict_disable_shape_check=True)
#
# print('roc_auc_score:' , roc_auc_score(y_test[test_rows], y_pred))
# print('accuracy:', accuracy_score(y_test[test_rows], y_pred.round()))
# print('precision:', precision_score(y_test[test_rows], y_pred.round(), average='weighted'))
# print('recall:', recall_score(y_test[test_rows], y_pred.round(), average='weighted'))
# print('f1-score:', f1_score(y_test[test_rows], y_pred.round(), average='weighted'))

# print('LightGBM识别模型v2-----------')
#
# lgbm_model = lgbm.Booster(model_file='model.txt')
# y_pred = lgbm_model.predict(x_test[test_rows],predict_disable_shape_check=True)
#
# fpr, tpr, thresholds = roc_curve(y_test, y_pred.round(), pos_label=1)
# print('roc_auc_score:' , roc_auc_score(y_test[test_rows], y_pred))
# print('accuracy:', accuracy_score(y_test[test_rows], y_pred.round()))
# print('precision:', precision_score(y_test[test_rows], y_pred.round(), average='weighted'))
# print('recall:', recall_score(y_test[test_rows], y_pred.round(), average='weighted'))
# print('f1-score:', f1_score(y_test[test_rows], y_pred.round(), average='weighted'))
# target_names = ['bengin', 'malware']
# print(classification_report(y_test, y_pred.round(), target_names=target_names))
# plt.plot(fpr, tpr, color='yellow', label='LGBM_G')

plt.legend()
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.show()