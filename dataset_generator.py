#!/usr/bin/env python
import os
import json
import classifier
import argparse

"""
    Samplepath Directory format  
    .
        train
            malware
            benign
        test
            malware
            benign
"""

def main():
    prog = "dataset_generator"
    descr = "Generates a data set from the specified sample file"
    parser = argparse.ArgumentParser(prog=prog, description=descr)
    parser.add_argument("-s", "--samplepath", type=str, default=None, required=True, help="Sample dataset")
    args = parser.parse_args()

    malware_train_path = args.samplepath + "\\train\\malware"
    benign_train_path = args.samplepath + "\\train\\benign"
    malware_test_path = args.samplepath + "\\test\\malware"
    benign_test_path = args.samplepath + "\\test\\benign"

    if not os.path.exists(malware_train_path):
        print("{} does not exist".format(malware_train_path))
    else:
        for root, dirs,files in os.walk(malware_train_path):
            for file in files:
                dir2file = os.path.join(root, file)
                file_data = open(dir2file, "rb").read()
                features_string = classifier.dataset_generator(file_data)
                features_string["label"] = 1
                features = json.dumps(features_string)
                f = open("./dateset/train_features.jsonl", "a", encoding="utf-8")
                f.write(features + "\n")
                f.close()

    if not os.path.exists(benign_train_path):
        print("{} does not exist".format(benign_train_path))
    else:
        for root, dirs,files in os.walk(benign_train_path):
            for file in files:
                dir2file = os.path.join(root, file)
                file_data = open(dir2file, "rb").read()
                features_string = classifier.dataset_generator(file_data)
                features_string["label"] = 0
                features = json.dumps(features_string)
                f = open("./dateset/train_features.jsonl", "a", encoding="utf-8")
                f.write(features + "\n")
                f.close()

    if not os.path.exists(malware_test_path):
        print("{} does not exist".format(malware_test_path))
    else:
        for root, dirs,files in os.walk(malware_test_path):
            for file in files:
                dir2file = os.path.join(root, file)
                file_data = open(dir2file, "rb").read()
                features_string = classifier.dataset_generator(file_data)
                features_string["label"] = 1
                features = json.dumps(features_string)
                f = open("./dateset/test_features.jsonl", "a", encoding="utf-8")
                f.write(features + "\n")
                f.close()

    if not os.path.exists(benign_test_path):
        print("{} does not exist".format(benign_test_path))
    else:
        for root, dirs,files in os.walk(benign_test_path):
            for file in files:
                dir2file = os.path.join(root, file)
                file_data = open(dir2file, "rb").read()
                features_string = classifier.dataset_generator(file_data)
                features_string["label"] = 0
                features = json.dumps(features_string)
                f = open("./dateset/test_features.jsonl", "a", encoding="utf-8")
                f.write(features + "\n")
                f.close()

if __name__ == "__main__":
    main()
