# -*- coding: utf-8 -*-
import numpy as np
from get_opcode import *

from gensim.models.doc2vec import Doc2Vec, TaggedDocument


def my_doc2vec(asm_path, model_path):
    """
    Generate a doc2vec model and save it.
    :param asm_path: The path of all .asm files, which is used to generate the document of Doc2Vec model.
    :param model_path: The path of Doc2Vec model.
    :return: The doc2vec model.
    """
    # Generate the documents, which is used in Doc2Vec model.
    all_opcode_seqs = get_all_opcode_seqs(asm_path)
    documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(all_opcode_seqs)]

    # Generate the Doc2Vec model.
    model = Doc2Vec(documents, workers=4, vector_size=256)

    # Save the Doc2Vec model.
    dir = "/".join(model_path.split('/')[:-1])
    if not os.path.exists(dir):
        os.mkdir(dir)
    model.save(model_path)

    return model


def vectorize_asm(asm_path, vec_path, model_path):
    """
    Use Doc2Vec model to vectorize all .asm files and save them as .asm.model file.
    The dimension of vectorized .asm files is 1*100.
    :param asm_path: The path of .asm files.
    :param model_path: The path of Doc2Vec model.
    :param vec_path: The path of .asm.vec files.
    """
    model = Doc2Vec.load(model_path)
    if not os.path.exists(vec_path):
        os.mkdir(vec_path)

    dirs = os.listdir(asm_path)
    for dir in dirs:
        if not os.path.exists(vec_path + dir):
            os.mkdir(vec_path + dir)
        asm_file_list = os.listdir(asm_path + dir)
        for file in asm_file_list:
            vector = model.infer_vector(get_opcode_sequence(asm_path + dir + '/' + file))
            np.savetxt(vec_path + dir + '/' + file + '.vec', vector, '%1.8f')
